[{"C:\\Users\\admin\\Desktop\\minigame\\src\\reportWebVitals.js":"1","C:\\Users\\admin\\Desktop\\minigame\\src\\App.js":"2","C:\\Users\\admin\\Desktop\\game\\src\\App.js":"3","C:\\Users\\admin\\Desktop\\game\\src\\index.js":"4"},{"size":362,"mtime":1610938527518,"results":"5","hashOfConfig":"6"},{"size":4129,"mtime":1612259933230,"results":"7","hashOfConfig":"6"},{"size":4178,"mtime":1612260755585,"results":"8","hashOfConfig":"9"},{"size":500,"mtime":1610938527518,"results":"10","hashOfConfig":"9"},{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ge1fpp",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},"1wdyhzj",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\admin\\Desktop\\minigame\\src\\reportWebVitals.js",[],"C:\\Users\\admin\\Desktop\\minigame\\src\\App.js",["20"],"C:\\Users\\admin\\Desktop\\game\\src\\App.js",["21"],"import './App.css';\nimport { useState, useEffect } from 'react'\nfunction App() {\n  const TEXT_LIST = [\"Đỏ\", \"Xanh Dương\", \"Vàng\", \"Xanh Lá\"]\n\n  const RED = \"#ff0900\"\n  const BLUE = \"#0079ff\"\n  const YELLOW = \"#ffef00\"\n  const GREEN = \"#00f11d\"\n\n  const TEXT_COLOR = [RED, BLUE, YELLOW, GREEN]\n  const INIT_QUESTION = {\n    title: \"GO\",\n    color: RED\n  }\n  const INIT_SCORE = 0\n  const INIT_LEVEL = 1\n\n  const [question, setQuestion] = useState(INIT_QUESTION)\n  const [score, setScore] = useState(INIT_SCORE)\n  const [duration, setDuration] = useState(10)\n  const [level, setLevel] = useState(INIT_LEVEL)\n  const [isStart, setIsStart] = useState(false)\n  const [gameStatus, setGameStatus] = useState(false)\n  const [heightScore, setHeightScore] = useState(0)\n  let timeout = null\n  useEffect(() => {\n    if (isStart) {\n      timeout = setTimeout(() => {\n        console.log(\"useEffect\");\n        gameOver(\"Time out !!!\")\n      }, duration * 1000)\n    }\n  }, [isStart])\n\n  useEffect(() => {\n      console.log(\"score\", score);\n    if (score >= 2000) {\n      setDuration(3)\n    } \n    else  if (score >= 1000) {\n      setDuration(4)\n    }\n    else  if (score >= 400) {\n      setLevel(4)\n    } \n    else  if (score >= 300) {\n      setLevel(3)\n    }\n    else  if (score >= 200) {\n      setLevel(2)\n    }\n    \n   \n  }, [score])\n\n  const gameOver = (content) => {\n    setGameStatus(false)\n    setLevel(1)\n    setIsStart(false)\n    setScore(0)\n    setQuestion(INIT_QUESTION)\n    alert( content ? content : \"Game Over\" )\n  }\n\n  const randomQuestion = () => {\n    const text = getRandomInt(level)\n    let color = getRandomInt(level)\n    if(level > 1 ) {\n      while (text === color) {\n        color = getRandomInt(level)\n      }\n    }\n    else {\n      color = 0\n    }\n    const question = {\n      title: TEXT_LIST[text],\n      color: TEXT_COLOR[color]\n    }\n    console.log(\"question\", question);\n    setQuestion(question)\n  }\n\n  function getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n  }\n  const onClickGo = () => {\n    if (gameStatus) return\n    setGameStatus(true)\n    randomQuestion()\n    setIsStart(true)\n  }\n  const onClickAnswer = (answer) => {\n    //  if(!isStart) return\n    clearTimeout(timeout)\n    setIsStart(false)\n    // console.log(\"answer\", answer);\n    // console.log(\"question\", question);\n    // console.log(\"answer === question.color\", answer === question.color);\n    if (answer === question.color) {\n      const newScore = score + 100\n      if (newScore >= heightScore) {\n        setHeightScore(newScore)\n      }\n      setScore(newScore)\n\n      randomQuestion()\n      setTimeout(() => {\n        setIsStart(true)\n      }, 100)\n    }\n    else {\n      gameOver()\n    }\n\n   \n  }\n\n  const Item =({color})=> {\n    return (\n      <div className=\"answer\" style={{ backgroundColor: color }} onClick={() => onClickAnswer(color)} />\n    )\n  }\n\n  const renderGameAns = () => {\n    const colorArr = []\n    while (colorArr.length < level) {\n      const ind = getRandomInt(level)\n        if(colorArr.indexOf(TEXT_COLOR[ind])  < 0)  {\n          colorArr.push(TEXT_COLOR[ind])\n        }\n    }\n    return (\n      <div className=\"center\">\n          {\n            colorArr.map((item)=> \n             <Item  color={item} />\n            )\n          }\n      </div>\n    )\n\n  }\n  return (\n    <div className=\"App\">\n      <h1> Chọn màu của chữ</h1>\n      <h2> Highest score : {heightScore}</h2>\n      <h2>Level: {level}</h2>\n      <h3> Score: {score}</h3>\n\n      {/* <h2 style={{color: question.color}} >{question.title}</h2> */}\n\n      <h2 style={{ color: question.color, cursor: \"pointer\" }} onClick={onClickGo}>{question.title}</h2>\n\n      {\n        !gameStatus ?\n          <span style={{ margin: 30 }}>Chọn vào vào ô có màu giống với màu của chữ, không phải nội dung chữ, đừng để lừa nhé ?</span>\n          : \n          renderGameAns()\n      }\n\n      <div style={{ margin: 30 }}></div>\n\n\n      <div className=\"ProgressBar outer\">\n        <div style={{animationDuration: duration + \"s\"}} className={isStart ? \"ProgressBar inner start\" : \"ProgressBar inner\"} />\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\admin\\Desktop\\game\\src\\index.js",[],{"ruleId":"22","severity":1,"message":"23","line":29,"column":17,"nodeType":"24","endLine":32,"endColumn":26},{"ruleId":"22","severity":1,"message":"23","line":29,"column":17,"nodeType":"24","endLine":32,"endColumn":26},"react-hooks/exhaustive-deps","Assignments to the 'timeout' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression"]