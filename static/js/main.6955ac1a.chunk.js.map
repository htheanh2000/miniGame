{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","TEXT_LIST","RED","TEXT_COLOR","INIT_QUESTION","title","color","useState","question","setQuestion","score","setScore","duration","setDuration","level","setLevel","isStart","setIsStart","gameStatus","setGameStatus","heightScore","setHeightScore","timeout","useEffect","setTimeout","console","log","gameOver","content","alert","randomQuestion","text","getRandomInt","max","Math","floor","random","Item","className","style","backgroundColor","onClick","answer","clearTimeout","newScore","onClickAnswer","cursor","colorArr","length","ind","indexOf","push","map","item","renderGameAns","margin","animationDuration","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6955ac1a.chunk.js","sourcesContent":["import './App.css';\nimport { useState, useEffect } from 'react'\nfunction App() {\n  const TEXT_LIST = [\"Đỏ\", \"Xanh Dương\", \"Vàng\", \"Xanh Lá\"]\n\n  const RED = \"#ff0900\"\n  const BLUE = \"#0079ff\"\n  const YELLOW = \"#ffef00\"\n  const GREEN = \"#00f11d\"\n\n  const TEXT_COLOR = [RED, BLUE, YELLOW, GREEN]\n  const INIT_QUESTION = {\n    title: \"GO\",\n    color: RED\n  }\n  const INIT_SCORE = 0\n  const INIT_LEVEL = 1\n\n  const [question, setQuestion] = useState(INIT_QUESTION)\n  const [score, setScore] = useState(INIT_SCORE)\n  const [duration, setDuration] = useState(10)\n  const [level, setLevel] = useState(INIT_LEVEL)\n  const [isStart, setIsStart] = useState(false)\n  const [gameStatus, setGameStatus] = useState(false)\n  const [heightScore, setHeightScore] = useState(0)\n  let timeout = null\n  useEffect(() => {\n    if (isStart) {\n      timeout = setTimeout(() => {\n        console.log(\"useEffect\");\n        gameOver(\"Time out !!!\")\n      }, duration * 1000)\n    }\n  }, [isStart])\n\n  useEffect(() => {\n      console.log(\"score\", score);\n    if (score >= 2000) {\n      setDuration(3)\n    } \n    else  if (score >= 1000) {\n      setDuration(4)\n    }\n    else  if (score >= 400) {\n      setLevel(4)\n    } \n    else  if (score >= 300) {\n      setLevel(3)\n    }\n    else  if (score >= 200) {\n      setLevel(2)\n    }\n    \n   \n  }, [score])\n\n  const gameOver = (content) => {\n    setGameStatus(false)\n    setLevel(1)\n    setIsStart(false)\n    setScore(0)\n    setQuestion(INIT_QUESTION)\n    alert( content ? content : \"Game Over\" )\n  }\n\n  const randomQuestion = () => {\n    const text = getRandomInt(level)\n    let color = getRandomInt(level)\n    if(level > 1 ) {\n      while (text === color) {\n        color = getRandomInt(level)\n      }\n    }\n    else {\n      color = 0\n    }\n    const question = {\n      title: TEXT_LIST[text],\n      color: TEXT_COLOR[color]\n    }\n    console.log(\"question\", question);\n    setQuestion(question)\n  }\n\n  function getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n  }\n  const onClickGo = () => {\n    if (gameStatus) return\n    setGameStatus(true)\n    randomQuestion()\n    setIsStart(true)\n  }\n  const onClickAnswer = (answer) => {\n    //  if(!isStart) return\n    clearTimeout(timeout)\n    setIsStart(false)\n    // console.log(\"answer\", answer);\n    // console.log(\"question\", question);\n    // console.log(\"answer === question.color\", answer === question.color);\n    if (answer === question.color) {\n      const newScore = score + 100\n      if (newScore >= heightScore) {\n        setHeightScore(newScore)\n      }\n      setScore(newScore)\n\n      randomQuestion()\n      setTimeout(() => {\n        setIsStart(true)\n      }, 100)\n    }\n    else {\n      gameOver()\n    }\n\n   \n  }\n\n  const Item =({color})=> {\n    return (\n      <div className=\"answer\" style={{ backgroundColor: color }} onClick={() => onClickAnswer(color)} />\n    )\n  }\n\n  const renderGameAns = () => {\n    const colorArr = []\n    while (colorArr.length < level) {\n      const ind = getRandomInt(level)\n        if(colorArr.indexOf(TEXT_COLOR[ind])  < 0)  {\n          colorArr.push(TEXT_COLOR[ind])\n        }\n    }\n    return (\n      <div className=\"center\">\n          {\n            colorArr.map((item)=> \n             <Item  color={item} />\n            )\n          }\n      </div>\n    )\n\n  }\n  return (\n    <div className=\"App\">\n      <h1> Chọn màu của chữ</h1>\n      <h2> Highest score : {heightScore}</h2>\n      <h2>Level: {level}</h2>\n      <h3> Score: {score}</h3>\n\n      {/* <h2 style={{color: question.color}} >{question.title}</h2> */}\n\n      <h2 style={{ color: question.color, cursor: \"pointer\" }} onClick={onClickGo}>{question.title}</h2>\n\n      {\n        !gameStatus ?\n          <span style={{ margin: 30 }}>Chọn vào vào ô có màu giống với màu của chữ, không phải nội dung chữ, đừng để lừa nhé ?</span>\n          : \n          renderGameAns()\n      }\n\n      <div style={{ margin: 30 }}></div>\n\n\n      <div className=\"ProgressBar outer\">\n        <div style={{animationDuration: duration + \"s\"}} className={isStart ? \"ProgressBar inner start\" : \"ProgressBar inner\"} />\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}